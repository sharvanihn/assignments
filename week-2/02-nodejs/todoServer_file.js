/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs").promises;
const app = express();

app.use(bodyParser.json());

function readTodos() {
  return new Promise(function (resolve) {
    resolve(
      fs.readFile("todos.json", "utf8", function (err, data) {
        if (err) throw err;
      })
    );
  });
}

function writeTodo(data) {
  return new Promise(function (resolve) {
    resolve(
      fs.writeFile("todos.json", data, (err) => {
        if (err) throw err;
      })
    );
  });
}

app.get("/todos", async (req, res) => {
  const todos = JSON.parse(await readTodos());
  res.json(todos);
});

app.get("/todos/:id", async (req, res) => {
  const todos = JSON.parse(await readTodos());
  const todo = todos.find((t) => t.id === parseInt(req.params.id));
  if (!todo) {
    res.status(404).send("");
  } else {
    res.send(todo);
  }
});

app.post("/todos", async (req, res) => {
  const todo = {
    id: Math.floor(Math.random() * 1000000),
    title: req.body.title,
    description: req.body.description,
  };
  const todos = JSON.parse(await readTodos());
  todos.push(todo);
  await writeTodo(JSON.stringify(todos));
  res.status(201).json(todo);
});

app.put("/todos/:id", async (req, res) => {
  const todos = JSON.parse(await readTodos());
  const todoIdx = todos.findIndex((t) => t.id === parseInt(req.params.id));
  if (todoIdx === -1) {
    res.status(404).send();
  } else {
    todos[todoIdx].title = req.body.title;
    todos[todoIdx].description = req.body.description;
    await writeTodo(JSON.stringify(todos));
    res.json(todos[todoIdx]);
  }
});

app.delete("/todos/:id", async (req, res) => {
  const todos = JSON.parse(await readTodos());
  const todoIdx = todos.findIndex((t) => t.id === parseInt(req.params.id));
  if (todoIdx === -1) {
    res.status(404).send();
  } else {
    todos.splice(todoIdx, 1);
    await writeTodo(JSON.stringify(todos));
    res.status(200).send("todo deleted");
  }
});

app.use((req, res, next) => {
  res.status(404).send("Route not found");
});

// app.listen(3000);
module.exports = app;
